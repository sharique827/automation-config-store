name: Deploy api service
on:
  workflow_dispatch:
  push:
    paths:
      - "src/config/build.yaml"
    branches-ignore:
      - main
      - dev

jobs:
  deploy-draft:
    if: startsWith(github.ref_name, 'release') == false
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
      url: https://github.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH Setup and Cloning Repository
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./key.pem
          chmod 600 ./key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts



          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} -T <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          echo "Removing existing repository directory if exists"
          rm -rf \$REPO_DIR
          echo "Cloning repository from main branch"
          git clone --single-branch --branch main https://github.com/ONDC-Official/automation-api-service-generator.git \$REPO_DIR
          EOF

      - name: Install Docker Compose (if not installed)
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null
          then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          EOF

      - name: Write secrets to .env on EC2
        run: |
          echo "Writing secrets to .env file"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          echo "Writing environment variables to .env file"
          echo "NODE_ENV=${{ vars.NODE_ENV }}" >> \$REPO_DIR/.env
          echo "SIGN_PRIVATE_KEY=${{ secrets.SIGN_PRIVATE_KEY }}" >> \$REPO_DIR/.env
          echo "PORT=${{ vars.PORT }}" >> \$REPO_DIR/.env
          echo "SIGN_PUBLIC_KEY=${{ vars.SIGN_PUBLIC_KEY }}" >> \$REPO_DIR/.env
          echo "SUBSCRIBER_ID=${{ vars.SUBSCRIBER_ID }}" >> \$REPO_DIR/.env
          echo "UKID=${{ vars.UKID }}" >> \$REPO_DIR/.env
          echo "ONDC_ENV=${{ vars.ONDC_ENV }}" >> \$REPO_DIR/.env
          echo "REDIS_USERNAME=${{ vars.REDIS_USERNAME }}" >> \$REPO_DIR/.env
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> \$REPO_DIR/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> \$REPO_DIR/.env
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> \$REPO_DIR/.env
          echo "WORKBENCH_SUBSCRIBER_ID=${{ vars.WORKBENCH_SUBSCRIBER_ID }}" >> \$REPO_DIR/.env
          echo "IN_HOUSE_REGISTRY=${{ vars.IN_HOUSE_REGISTRY }}" >> \$REPO_DIR/.env 
          echo "MOCK_SERVER_URL=${{ vars.MOCK_SERVER_URL }}" >> \$REPO_DIR/.env
          echo "DATA_BASE_URL=${{ vars.DATA_BASE_URL }}" >> \$REPO_DIR/.env
          echo "API_SERVICE_URL=${{ vars.API_SERVICE_URL }}" >> \$REPO_DIR/.env
          echo "CONFIG_SERVICE_URL=${{ vars.CONFIG_SERVICE_URL }}" >> \$REPO_DIR/.env
          echo "CONTAINER_NAME=${{ vars.CONTAINER_NAME }}" >> \$REPO_DIR/.env
          echo "DOMAIN=${{ vars.DOMAIN }}" >> \$REPO_DIR/.env
          echo "VERSION=${{ vars.VERSION }}" >> \$REPO_DIR/.env
          echo "SERVICE_NAME=${{ vars.SERVICE_NAME }}" >> \$REPO_DIR/.env
          echo "TRACE_URL=${{ vars.TRACE_URL }}" >> \$REPO_DIR/.env
          echo "API_SERVICE_KEY=${{ secrets.API_SERVICE_KEY_DEV }}" >> \$REPO_DIR/.env
          echo "LOKI_HOST=${{ vars.LOKI_HOST }}" >> \$REPO_DIR/.env
          echo "HOSTED_ENV=${{ vars.HOSTED_ENV_DEV }}" >> \$REPO_DIR/.env
          echo "NO_URL=${{ vars.NO_URL }}" >> \$REPO_DIR/.env
          echo "NO_TOKEN=${{ secrets.NO_TOKEN }}" >> \$REPO_DIR/.env
          EOF

      - name: Verify .env and docker-compose.yml files
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          # Check if .env and docker-compose.yml files exist
          if [ ! -f \$REPO_DIR/.env ]; then
            echo ".env file not found in \$REPO_DIR!"
            exit 1
          fi
          if [ ! -f \$REPO_DIR/docker-compose.yml ]; then
            echo "docker-compose.yml file not found in \$REPO_DIR!"
            exit 1
          fi
          echo ".env and docker-compose.yml files found."
          EOF

      - name: initiate submodule
        run: |
          echo "cloning submodule"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          cd \$REPO_DIR
          git submodule update --init --recursive
          EOF

      - name: Add latest build.yaml file
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          git clone --single-branch --branch ${{ github.ref_name }} https://github.com/ONDC-Official/automation-config-store.git \$REPO_DIR/automation-config-store
           rm -rf \$REPO_DIR/src/config
           mv -f \$REPO_DIR/automation-config-store/src/config  \$REPO_DIR/src/config
          EOF

      - name: Automation Api Server Deployment
        run: |
          echo "Deploying with Docker Compose"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          cd \$REPO_DIR

          # Ensure the .env and docker-compose.yml files exist
          if [ ! -f .env ]; then
            echo ".env file not found!"
            exit 1
          fi

          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml file not found!"
            exit 1
          fi

          # Start the containers using Docker Compose
          echo "Running docker-compose up -d --build"
          sudo docker compose up -d --build
          EOF

  deploy-release:
    if: startsWith(github.ref_name, 'release') == true
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
      url: https://github.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH Setup and Cloning Repository
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./key.pem
          chmod 600 ./key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts



          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} -T <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          echo "Removing existing repository directory if exists"
          rm -rf \$REPO_DIR
          echo "Cloning repository from main branch"
          git clone --single-branch --branch main https://github.com/ONDC-Official/automation-api-service-generator.git \$REPO_DIR
          EOF

      - name: Install Docker Compose (if not installed)
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null
          then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          EOF

      - name: Write secrets to .env on EC2
        run: |
          echo "Writing secrets to .env file"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          echo "Writing environment variables to .env file"
          echo "NODE_ENV=${{ vars.NODE_ENV }}" >> \$REPO_DIR/.env
          echo "SIGN_PRIVATE_KEY=${{ secrets.SIGN_PRIVATE_KEY }}" >> \$REPO_DIR/.env
          echo "PORT=${{ vars.PORT }}" >> \$REPO_DIR/.env
          echo "SIGN_PUBLIC_KEY=${{ vars.SIGN_PUBLIC_KEY }}" >> \$REPO_DIR/.env
          echo "SUBSCRIBER_ID=${{ vars.SUBSCRIBER_ID_STAGING }}" >> \$REPO_DIR/.env
          echo "UKID=${{ vars.UKID_STAGING }}" >> \$REPO_DIR/.env
          echo "ONDC_ENV=${{ vars.ONDC_ENV }}" >> \$REPO_DIR/.env
          echo "REDIS_USERNAME=${{ vars.REDIS_USERNAME }}" >> \$REPO_DIR/.env
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> \$REPO_DIR/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> \$REPO_DIR/.env
          echo "REDIS_PORT=${{ vars.REDIS_PORT_STAGING }}" >> \$REPO_DIR/.env
          echo "MOCK_SERVER_URL=${{ vars.MOCK_SERVER_URL_STAGING }}" >> \$REPO_DIR/.env
          echo "DATA_BASE_URL=${{ vars.DATA_BASE_URL_STAGING }}" >> \$REPO_DIR/.env
          echo "API_SERVICE_URL=${{ vars.API_SERVICE_URL_STAGING }}" >> \$REPO_DIR/.env
          echo "CONTAINER_NAME=${{ vars.CONTAINER_NAME }}" >> \$REPO_DIR/.env
          echo "CONFIG_SERVICE_URL=${{ vars.CONFIG_SERVICE_URL_STAGING }}" >> \$REPO_DIR/.env
          echo "DOMAIN=${{ vars.DOMAIN }}" >> \$REPO_DIR/.env
          echo "VERSION=${{ vars.VERSION }}" >> \$REPO_DIR/.env
          echo "SERVICE_NAME=${{ vars.SERVICE_NAME }}" >> \$REPO_DIR/.env
          echo "TRACE_URL=${{ vars.TRACE_URL_STAGING }}" >> \$REPO_DIR/.env
          echo "API_SERVICE_KEY=${{ secrets.API_SERVICE_KEY_STAGING }}" >> \$REPO_DIR/.env
          echo "LOKI_HOST=${{ vars.LOKI_HOST }}" >> \$REPO_DIR/.env
          echo "WORKBENCH_SUBSCRIBER_ID=${{ vars.WORKBENCH_SUBSCRIBER_ID }}" >> \$REPO_DIR/.env
          echo "IN_HOUSE_REGISTRY=${{ vars.IN_HOUSE_REGISTRY_STAGING }}" >> \$REPO_DIR/.env
          echo "HOSTED_ENV=${{ vars.HOSTED_ENV_STAGING }}" >> \$REPO_DIR/.env
          echo "NO_URL=${{ vars.NO_URL }}" >> \$REPO_DIR/.env
          echo "NO_TOKEN=${{ secrets.NO_TOKEN }}" >> \$REPO_DIR/.env
          EOF

      - name: Verify .env and docker-compose.yml files
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          # Check if .env and docker-compose.yml files exist
          if [ ! -f \$REPO_DIR/.env ]; then
            echo ".env file not found in \$REPO_DIR!"
            exit 1
          fi
          if [ ! -f \$REPO_DIR/docker-compose.yml ]; then
            echo "docker-compose.yml file not found in \$REPO_DIR!"
            exit 1
          fi
          echo ".env and docker-compose.yml files found."
          EOF

      - name: initiate submodule
        run: |
          echo "cloning submodule"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          cd \$REPO_DIR
          git submodule update --init --recursive --remote
          EOF

      - name: Add latest build.yaml file
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          git clone --single-branch --branch ${{ github.ref_name }} https://github.com/ONDC-Official/automation-config-store.git \$REPO_DIR/automation-config-store
           rm -rf \$REPO_DIR/src/config
           mv -f \$REPO_DIR/automation-config-store/src/config  \$REPO_DIR/src/config
          EOF

      - name: Automation Api Server Deployment
        run: |
          echo "Deploying with Docker Compose"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework/api-service/api-service-generator-${{ github.ref_name }}
          cd \$REPO_DIR

          # Ensure the .env and docker-compose.yml files exist
          if [ ! -f .env ]; then
            echo ".env file not found!"
            exit 1
          fi

          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml file not found!"
            exit 1
          fi

          # Start the containers using Docker Compose
          echo "Running docker-compose up -d --build"
          sudo docker compose up -d --build
          EOF
